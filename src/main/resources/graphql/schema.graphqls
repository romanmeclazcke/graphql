type Query {
    findAllUser(size: Int, after: String, first: Int,  filters: UserFilters): UserConnection
}


type Mutation {
    createUser(input: UserInput): User
}

type User {
    id: ID
    name: String
    lastName: String
    courses: [Course!]!
}

input UserFilters{
    id: ID
    name:String
    lastName: String
    courseIds: String
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    node: User!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Course {
    id: ID
    name: String
    teacherName: String
}

input UserInput {
    name: String
    lastName: String
    courseIds: [String]
}